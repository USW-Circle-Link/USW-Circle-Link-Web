{"version":3,"file":"js/564.c785ed13.js","mappings":"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","sources":["webpack://donggurami/./src/components/ClubLeader/MorePass.vue","webpack://donggurami/./src/components/ClubLeader/MorePass.vue?f1f2"],"sourcesContent":["<template>\r\n  <div class=\"MainBox\">\r\n    <div class=\"header\">\r\n      <p class=\"common\">지원자 추가 합격 처리</p>\r\n    </div>\r\n    <div class=\"status-actions\">\r\n      <button class=\"send-result-btn\" @click=\"showPopup\">추가 합격 결과 전송</button>\r\n      <div class=\"status-boxes\">\r\n        <button class=\"status-box approve-box\" @click=\"setAllApplicantsStatus('PASS')\">전체<br>합격</button>\r\n      </div>\r\n    </div>\r\n    <div class=\"contents\">\r\n      <div class=\"applicant-list\">\r\n        <div class=\"applicant-item\" v-for=\"applicant in applicants\" :key=\"applicant.aplictUUID\">\r\n          <p>{{ applicant.userName }}</p>\r\n          <p>{{ applicant.studentNumber }}</p>\r\n          <p>{{ applicant.major }}</p>\r\n          <p>{{ applicant.userHp }}</p>\r\n          <div class=\"buttons-group\">\r\n            <label :class=\"{ checked: applicant.decision === 'PASS' }\" @click=\"toggleDecision(applicant, 'PASS')\">\r\n              <span class=\"check-icon\"></span>\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"showConfirmPopup\" class=\"popup-overlay\">\r\n      <div class=\"popup\">\r\n        <h2>추가 합격 결과 전송</h2>\r\n        <hr>\r\n        <p class=\"confirm-message\">추가 합격 처리를 확정 하시겠습니까?</p>\r\n        <p class=\"notice-message\">확정 후 지원자에게 알림이 발송 되니 신중하게 선택해 주세요.</p>\r\n        <div class=\"popup-buttons\">\r\n          <button @click=\"hidePopup\">취소</button>\r\n          <button @click=\"confirmSendResults\">확정</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n   \r\n  </div>\r\n\r\n  <!-- 예기치 못한 오류 팝업 -->\r\n  <div v-if=\"showUnexpectedErrorPopup\" class=\"popup-overlay\">\r\n    <div class=\"unexpectedPopup\">\r\n      <h2>동구라미</h2>\r\n      <hr />\r\n      <p class=\"confirm-message\">\r\n        <span class=\"error-highlight\">예기치 못한 오류</span>가 발생했습니다.<br>문제가 계속될 시, 관리자에게 문의해주세요.</p>\r\n      <div class=\"unexpectedPopup-buttons\">\r\n        <button @click=\"hideUnexpectedErrorPopup\">확인</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <Popup401 v-if=\"show401Popup\" />\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'; // axios를 가져오기\r\nimport store from '@/store/store'; // Vuex에서 상태 가져오기\r\nimport Popup401 from './401Popup.vue'; // 401 팝업 컴포넌트 추가\r\n\r\nexport default {\r\n  name: 'ApplicantManagement',\r\n  components: {\r\n    Popup401\r\n  },\r\n  data() {\r\n    return {\r\n      applicants: [],//지원자 목록 배열\r\n      showConfirmPopup: false,//합/불 확인 팝업 표시 여부\r\n      notification: {\r\n        message: '',\r\n        type: ''\r\n      },\r\n      fetchUrl: `${store.state.apiBaseUrl}/club-leader/${store.state.clubUUID}/failed-applicants`, // 지원자 명단을 가져오는 서버 URL\r\n      submitUrl: `${store.state.apiBaseUrl}/club-leader/${store.state.clubUUID}/failed-applicants/notifications`, // 합/불 결과를 보내는 서버 URL\r\n      show401Popup: false,\r\n      showUnexpectedErrorPopup: false,\r\n    };\r\n  },\r\n  //로드 되면 지원자 목록 가져오기\r\n  mounted() {\r\n    this.fetchApplicants();\r\n  },\r\n  methods: {\r\n    // 401 에러 처리를 위한 공통 함수\r\n    handle401Error(error) {\r\n      // 에러 응답 O, 상태코드 401인 경우\r\n      if (error.response && error.response.status === 401) {\r\n        this.show401Popup = true;\r\n        return true;\r\n      }\r\n      return false;\r\n    },\r\n    // 지원자 목록을 서버에서 가져오는 메서드\r\n    async fetchApplicants() {\r\n      try {\r\n        const response = await axios.get(this.fetchUrl, {\r\n          headers: {\r\n            'Authorization': `Bearer ${store.state.accessToken}`,\r\n            'Content-Type': 'application/json',\r\n          },\r\n        });\r\n\r\n        const data = response.data.data;\r\n        // 응답 데이터가 배열 형태일 경우 처리\r\n        if (data && Array.isArray(data)) {\r\n          // applicant 데이터를 가공하여 상태 저장  \r\n          this.applicants = data.map(applicant => ({\r\n            aplictUUID: applicant.aplictUUID, // 지원자 UUID \r\n            userName: applicant.userName, // 지원자 이름\r\n            studentNumber: applicant.studentNumber, // 지원자 학번\r\n            major: applicant.major, // 지원자 학과 \r\n            userHp: applicant.userHp, // 지원자 연락처 \r\n            decision: null, // 합/불 상태 (초기값 null) \r\n          }));\r\n          this.showNotification('지원자 목록을 성공적으로 가져왔습니다.', 'success');\r\n        }\r\n      } catch (error) {\r\n        if (!this.handle401Error(error)) {\r\n          // 요청 실패 시 \r\n          alert('동아리 정보를 불러오는데 실패했습니다.', 'error');\r\n        }\r\n      }\r\n    },\r\n    showPopup() {\r\n      //합/불 결과 전송 확인 팝업을 표시\r\n      this.showConfirmPopup = true;\r\n    },\r\n    //팝업 숨김\r\n    hidePopup() {\r\n      this.showConfirmPopup = false;\r\n    },\r\n    hideUnexpectedErrorPopup() {\r\n      this.showUnexpectedErrorPopup = false;\r\n    },\r\n    //팝업 숨기고 결과를 전송하는 메서드 호출\r\n    confirmSendResults() {\r\n      this.hidePopup();\r\n      this.sendResults();\r\n    },\r\n    // 합/불 결과를 서버에 전송하기 전 데이터 검증 메서드\r\n    validateResults() {\r\n      // 선택된 지원자가 하나라도 있는지 확인\r\n      const hasSelectedApplicants = this.applicants.some(applicant => applicant.decision !== null);\r\n\r\n      if (!hasSelectedApplicants) {\r\n        alert('최소 한 명 이상의 지원자에 대해 합/불 상태를 설정해 주세요.');\r\n        return false;\r\n      }\r\n      return true;\r\n    },\r\n    // 합/불 결과를 서버에 전송하는 메서드\r\n    async sendResults() {\r\n      // decision이 없는 지원자가 있는 경우 전송 X\r\n      if (!this.validateResults()) {\r\n        return;\r\n      }\r\n\r\n      // 결정된 지원자만 필터링\r\n      const selectedApplicants = this.applicants.filter(applicant => applicant.decision !== null);\r\n      // 서버에 보낼 데이터 포맷 정의\r\n      const results = selectedApplicants.map(applicant => ({\r\n        aplictUUID: applicant.aplictUUID,\r\n        aplictStatus: applicant.decision,\r\n      }));\r\n\r\n      try {\r\n        const response = await axios.post(this.submitUrl, results, {\r\n          headers: {\r\n            'Authorization': `Bearer ${store.state.accessToken}`,\r\n            'Content-Type': 'application/json',\r\n          },\r\n        });\r\n\r\n        // 성공 시 목록 새로고침\r\n        this.showNotification('결과가 성공적으로 전송되었습니다.', 'success');\r\n        await this.fetchApplicants();\r\n      } catch (error) {\r\n        const errorData = error.respose?.data || {};\r\n\r\n        if (error.response?.data?.code === \"CMEM-202\") {\r\n          alert('이미 동아리원으로 등록된 지원자가 있습니다. 관리자에게 문의하세요.', 'error');\r\n        } else if (!this.handle401Error(error)) {\r\n          const errorMessage = error.response?.data?.message || '결과 전송에 실패했습니다.';\r\n          alert(errorMessage, 'error');\r\n        } else if (errorData.code === 'INVALID_ARGUMENT') {\r\n            this.showUnexpectedErrorPopup = true;\r\n        } else {\r\n            alert(errorData.message || '결과 전송에 실패했습니다.', 'error');\r\n        }\r\n      }\r\n    },\r\n    // 지원자의 합/불 상태를 토글하는 메서드 @\r\n    toggleDecision(applicant, decision) {\r\n      if (['PASS', 'FAIL'].includes(decision)) {\r\n        // 현재 상태와 같은 상태를 선택하면 선택 해제 (null로 설정)\r\n        if (applicant.decision === decision) {\r\n          applicant.decision = null;\r\n        } else {\r\n          // 다른 상태를 선택하면 해당 상태로 변경\r\n          applicant.decision = decision;\r\n        }\r\n      } else {\r\n        alert('잘못된 합격/불합격 상태입니다. 상태는 PASS 또는 FAIL이어야 합니다.', 'error');\r\n      }\r\n    },\r\n    // 전체 지원자의 합/불 상태를 설정하는 메서드\r\n    setAllApplicantsStatus(status) {\r\n      this.applicants.forEach(applicant => {\r\n        applicant.decision = status;\r\n      });\r\n    },\r\n    // 사용자에게 알림 메시지를 표시하는 메서드\r\n    showNotification(message, type) {\r\n      this.notification.message = message;\r\n      this.notification.type = type;\r\n      setTimeout(() => {\r\n        this.notification.message = '';\r\n      }, 3000); // 3초 후 알림 사라짐\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* ====== Layout base ====== */\r\n.MainBox{\r\n  width: clamp(340px, 60vw, 960px); /* 최소 340px, 보통은 화면의 60%, 최대 960px */\r\n  margin: 0 auto 30px;\r\n  background: #fff;\r\n  border-radius: 8px;\r\n  padding: clamp(14px, 2vw, 24px);\r\n}\r\n\r\n/* ====== Header ====== */\r\n.header{\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n.common{\r\n  color: var(--text, #000);\r\n  font-weight: 600;\r\n  letter-spacing: -0.6px;\r\n  line-height: 1.2;\r\n  margin: 0;\r\n  font-size: clamp(18px, 2.1vw, 24px); /* 유동 폰트 */\r\n}\r\n\r\n/* ====== Actions (좌:전송버튼 / 우:상태박스) ====== */\r\n.status-actions{\r\n  display: flex;\r\n  align-items: center;\r\n  flex-wrap: wrap;          /* 한 줄에 안 들어가면 줄 바꿈 */\r\n  column-gap: 12px;\r\n  row-gap: 10px;\r\n  width: 100%;\r\n}\r\n.send-result-btn{\r\n  justify-self: start;\r\n  min-width: 140px;\r\n  height: 44px;\r\n  border: 0;\r\n  border-radius: var(--radius, 8px);\r\n  background: var(--text, #000);\r\n  color: #fff;\r\n  cursor: pointer;\r\n  font-weight: 600;\r\n  padding: 0 var(--space-4, 16px);\r\n  flex: 1 1 220px;\r\n}\r\n.send-result-btn:focus-visible{ outline: 2px solid var(--accent, #FFB052); outline-offset: 2px; }\r\n\r\n.status-boxes{\r\n  display: inline-flex;\r\n  align-items: center;\r\n  gap: var(--space-2, 8px);\r\n}\r\n.status-box{\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-width: 56px;\r\n  height: 40px;\r\n  padding: 4px 10px;\r\n  border-radius: var(--radius, 8px);\r\n  border: 1px solid #ddd;\r\n  background: var(--muted, #f2f4f6);\r\n  font-size: 12px;\r\n  line-height: 1.1;\r\n}\r\n.approve-box{\r\n  background: var(--brand, #7FB08C);\r\n  color: #fff;\r\n  border-color: transparent;\r\n  cursor: pointer;\r\n}\r\n.approve-box:hover{ background: var(--brand-2, #6a9b7a); }\r\n\r\n/* ====== Contents / 리스트 래퍼 ====== */\r\n.contents{\r\n  display: grid;\r\n  grid-template-rows: 1fr;\r\n}\r\n\r\n.applicant-list{\r\n  display: grid;\r\n  grid-auto-rows: minmax(48px, auto);\r\n  gap: var(--space-3, 12px);\r\n  margin-top: var(--space-3, 12px);\r\n  max-height: 60vh;           /* 화면 높이에 비례 */\r\n  overflow-y: auto;\r\n  padding-right: 2px;         /* 스크롤바 여백 */\r\n}\r\n\r\n/* ====== Item (그리드 기반) ====== */\r\n.applicant-item{\r\n  display: grid;\r\n  align-items: center;\r\n  gap: var(--space-3, 12px);\r\n  background: var(--muted, #f2f4f6);\r\n  border-radius: 10px;\r\n  padding: 10px;\r\n  /* 데스크톱: 이름 / 학번 / 학과 / 전화 / 버튼 */\r\n  grid-template-columns: 1.2fr 0.9fr 1.4fr 1fr auto;\r\n}\r\n.applicant-item p{\r\n  margin: 0;\r\n  text-align: center;\r\n  font-size: 14px;\r\n  color: var(--text, #000);\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n.buttons-group{\r\n  display: inline-flex;\r\n  align-items: center;\r\n  gap: 9px;\r\n  justify-self: end;\r\n}\r\n.buttons-group label{\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 56px;\r\n  height: 40px;\r\n  border-radius: var(--radius, 8px);\r\n  cursor: pointer;\r\n  background: #eee;\r\n  border: 1px solid #e3e3e3;\r\n}\r\n.buttons-group label.checked{\r\n  background: var(--brand, #7FB08C);\r\n  border-color: transparent;\r\n  color: #fff;\r\n}\r\n.check-icon{\r\n  background: url('../../assets/check-solid.svg') no-repeat center center / 16px 16px;\r\n  width: 16px; height: 16px;\r\n  filter: invert(99%) sepia(4%) saturate(985%) hue-rotate(214deg) brightness(113%) contrast(100%);\r\n}\r\n\r\n/* ====== Popup ====== */\r\n.popup-overlay{\r\n  position: fixed; inset: 0;\r\n  background: rgba(0,0,0,0.5);\r\n  display: grid; place-items: center;\r\n  z-index: 1000;\r\n}\r\n.popup{\r\n  width: min(92vw, 520px);    /* 반응형 폭 */\r\n  background: #fff;\r\n  border-radius: var(--radius, 8px);\r\n  padding: clamp(16px, 2vw, 24px);\r\n  box-shadow: 0 10px 30px rgba(0,0,0,0.15);\r\n}\r\n.popup h2{\r\n  margin: 0 0 10px 0;\r\n  text-align: left;\r\n  font-size: clamp(16px, 1.8vw, 18px);\r\n}\r\nhr{ border: 0; border-top: 1px solid #d9d9d9; margin: 10px 0; }\r\n.confirm-message{ text-align: left; margin: 8px 0; }\r\n.notice-message{\r\n  text-align: left; font-size: 12px; color: var(--text-3, #767676); margin: 0;\r\n}\r\n.popup-buttons{\r\n  display: flex; justify-content: flex-end; gap: var(--space-2, 8px);\r\n  margin-top: var(--space-4, 16px);\r\n}\r\n.popup-buttons button{\r\n  min-width: 88px; height: 36px;\r\n  border: none; border-radius: 8px; cursor: pointer;\r\n  font-weight: 600;\r\n}\r\n.popup-buttons button:first-child{ background: #cecece; color: #fff; }\r\n.popup-buttons button:last-child{ background: var(--accent, #FFB052); color: #fff; }\r\n.popup-buttons button:last-child:hover{ background: var(--accent-2, #f49421); }\r\n\r\n/* ====== Breakpoints ====== */\r\n/* ≤1024px: 레이아웃 여유 축소, 버튼 조금 작게 */\r\n@media (max-width: 1024px){\r\n  .send-result-btn{ height: 42px; }\r\n  .status-box{ height: 38px; min-width: 52px; }\r\n  .buttons-group label{ height: 38px; width: 52px; }\r\n}\r\n\r\n/* ≤768px: 리스트 행을 3줄 레이아웃으로 재배치 */\r\n/* ≤768px: [수정] 리스트를 균형잡힌 2x2 형태로 재배치 */\r\n@media (max-width: 768px) {\r\n  .applicant-item {\r\n    /* 2열 그리드 정의 */\r\n    grid-template-columns: 1fr 1fr;\r\n    grid-template-rows: auto auto auto; /* 3개의 행 높이는 내용에 맞게 자동 조절 */\r\n    \r\n    /* [핵심] 그리드 영역 이름으로 레이아웃을 시각적으로 정의 */\r\n    grid-template-areas:\r\n      \"name   student-id\"\r\n      \"major  phone\"\r\n      \"actions actions\"; /* 버튼은 맨 아래 한 줄을 모두 차지 */\r\n\r\n    row-gap: 10px;\r\n    column-gap: 16px; /* 열 사이 간격 */\r\n    padding: 12px;\r\n  }\r\n\r\n  /* 각 요소에 grid-area 이름 할당 */\r\n  .applicant-item p:nth-of-type(1) { grid-area: name; }\r\n  .applicant-item p:nth-of-type(2) { grid-area: student-id; }\r\n  .applicant-item p:nth-of-type(3) { grid-area: major; }\r\n  .applicant-item p:nth-of-type(4) { grid-area: phone; }\r\n  .buttons-group { grid-area: actions; }\r\n\r\n  /* 모든 텍스트 왼쪽 정렬 및 스타일 초기화 */\r\n  .applicant-item p {\r\n    text-align: left;\r\n    padding-left: 4px;\r\n    grid-column: auto; /* 기존 grid-column 설정 초기화 */\r\n  }\r\n\r\n  /* 버튼 그룹 오른쪽 정렬 */\r\n  .buttons-group {\r\n    justify-self: end;\r\n  }\r\n}\r\n/* ≤600px: 폰 크기 최적화(패딩/폰트/버튼 폭) */\r\n@media (max-width: 600px){\r\n  .MainBox{ padding: var(--space-4, 16px); }\r\n  .send-result-btn{ width: 100%; justify-self: stretch; }  /* 전송 버튼 풀폭 */\r\n  .status-actions{ grid-template-columns: 1fr; }\r\n  .status-boxes{ justify-content: flex-end; }\r\n\r\n  .applicant-list{ max-height: 58vh; }\r\n  .applicant-item{ padding: 8px; gap: var(--space-2, 8px); }\r\n  .applicant-item p{ font-size: 13px; }\r\n  .buttons-group label{ width: 50px; height: 36px; }\r\n}\r\n\r\n/* ≤400px: 완전 스택 + 터치 여백 확보 */\r\n@media (max-width: 400px){\r\n  .status-boxes{ justify-content: stretch; }\r\n  .status-box{ flex: 1 1 auto; }\r\n  .applicant-item{\r\n    grid-template-columns: 1fr;   /* 세로 스택 */\r\n  }\r\n  .applicant-item p{ grid-column: 1 / -1; text-align: left; }\r\n  .buttons-group{ grid-column: 1 / -1; justify-self: stretch; justify-content: flex-end; }\r\n}\r\n</style>","import { render } from \"./MorePass.vue?vue&type=template&id=4ac9b035&scoped=true\"\nimport script from \"./MorePass.vue?vue&type=script&lang=js\"\nexport * from \"./MorePass.vue?vue&type=script&lang=js\"\n\nimport \"./MorePass.vue?vue&type=style&index=0&id=4ac9b035&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-4ac9b035\"]])\n\nexport default __exports__"],"names":["class","_createElementVNode","_hoisted_1","_hoisted_2","onClick","_cache","args","$options","showPopup","_hoisted_3","$event","setAllApplicantsStatus","_hoisted_4","_hoisted_5","_createElementBlock","_Fragment","_renderList","$data","applicants","applicant","key","aplictUUID","_toDisplayString","userName","studentNumber","major","userHp","_hoisted_6","_normalizeClass","checked","decision","toggleDecision","showConfirmPopup","_hoisted_8","_hoisted_9","_hoisted_10","hidePopup","confirmSendResults","showUnexpectedErrorPopup","_hoisted_11","_hoisted_12","_hoisted_13","hideUnexpectedErrorPopup","show401Popup","_createBlock","_component_Popup401","name","components","Popup401","data","notification","message","type","fetchUrl","store","state","apiBaseUrl","clubUUID","submitUrl","mounted","this","fetchApplicants","methods","handle401Error","error","response","status","axios","get","headers","accessToken","Array","isArray","map","showNotification","alert","sendResults","validateResults","hasSelectedApplicants","some","selectedApplicants","filter","results","aplictStatus","post","errorData","respose","code","errorMessage","includes","forEach","setTimeout","__exports__","render"],"sourceRoot":""}